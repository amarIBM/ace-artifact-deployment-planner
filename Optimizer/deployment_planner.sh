#!/bin/bash

# validate command line arguments
parse_arg(){
    # validate input path
    if [[ -d "$input_path" ]]
    then
        if [ -n '$(find "$input_path" -name "*.bar")' ]               #this line of code was generated by WCA@IBM
        then
            type="Bar"
        else
            echo "Input path $input_path DOES NOT contain bar files."
            exit 1
        fi
    elif [[ -f "$input_path" ]]
    then 
        if [[ "$input_path" == *.zip ]]
        then
            type="Zip"
        else
            echo "Input path $input_path is not a backup zip file"
            exit 1
        fi
    else
        echo "Input path $input_path DOES NOT exists."
        exit 1
    fi 
    
    # Checking if workspace exists and creating a directory called "Deployment_Planner" at workspace
    if [ ! -d "$workspace" ]
    then
        echo "Work directory $workspace DOES NOT exists."
        exit 1
    fi
    work_dir=${workspace}/Deployment_Planner
    # If workspace already has a directory called "Deployment_Planner", it is overwritten
    if [ -d "$work_dir" ]; 
    then
        rm -rf "$work_dir"
    fi
    mkdir "$work_dir"
    # Deleting "Deployment_Planner" directory if program exits
    trap 'rm -rf "$work_dir"' 0 1 2 3

    # Checking if output path exists and creating a directory with same name as input folder/zip
    if [ ! -d "$output_path" ]
    then
        echo "Output directory $output_path DOES NOT exists."
        exit 1
    fi
    output_dir="$output_path/$(basename -s .zip "$input_path")"
    if [ -d "$output_dir" ]; 
    then
        rm -rf "$output_dir"
    fi
    mkdir "$output_dir"

    exec 3>&1 4>&2
    trap 'rm -rf "$work_dir"; exec 2>&4 1>&3' 0 1 2 3
    exec 1>"$output_dir/optimizer.log" 2>&1
}

start_pwd=$(pwd)
trap 'cd "${start_pwd}"' 0 1 2 3
code_dir="$(dirname "$0")"
cd "$code_dir"
code_dir=$(pwd)

if [ $# -lt 2 ]
then
    echo "Usage: script.sh [file.zip/bar_folder] work_dir output_directory"
    exit 1
fi
input_path=$1
workspace=$2
output_path=$3
parse_arg
# Activate ACE integration console 
# On linux
source "/opt/IBM/ace-13.0.2.0/server/bin/mqsiprofile"
# On MacOS
# source "/Applications/IBM App Connect Enterprise.app/Contents/mqsi/server/bin/mqsiprofile"

if [[ "$type" == "Zip" ]]
then
    echo ""
    echo "Unzipping backup file: $(basename $input_path)" | tee /dev/tty
    unzip -q "$input_path" -d "$work_dir"
    servers=$work_dir/components/*/servers
    
    for server in $servers/*; 
    do
        echo -e "\n"
        echo "ANALYZING INTEGRATION SERVER: $(basename $server)" | tee /dev/tty
        cd $server
        mkdir $output_dir/$(basename $server)
	
       	# call CreateTemporaryWorkspaces.java
        echo -e "\nCreating temporary workspaces for:"
        java -cp "${code_dir}/AceDeploymentPlanner.jar"  com.ibm.ace.CreateTemporaryWorkspaces
        #java -jar "$CreateTemporaryWorkspaces_jar" 

        # run ibmint optimize in for loop
        echo -e "Running optimize on each app:"
        for f in temp*; 
        do
            echo "***************"
            echo "Running optimize on $f "                      
            ibmint optimize server --work-directory $server/$f       
            cp "$server"/"$f"/server.components.yaml "$output_dir"/$(basename $server)/"${f:5}".yaml       
        done

        echo "***************" 

        # call AnalyzeOptimizations.java
        echo -e "\nAnalyzing server.components.yaml for:"
        java -cp "${code_dir}/AceDeploymentPlanner.jar" com.ibm.ace.AnalyzeOptimizations $type $(basename $server)
        cp "$server"/output.txt "$output_dir"/$(basename $server)_OptimizerReport.txt
        echo "Output written to $output_dir/$(basename $server)_OptimizerReport.txt"
    done
    # call DeleteTemporaryWorkspaces
    rm -rf $work_dir
    type="Zip"
    
elif [[ "$type" == "Bar" ]]
then
    # echo "$work_dir"
    # echo "$input_path"
    cd "$input_path"
    for bar in *.bar;
    do
        echo -e "\n"
        echo "ANALYZING BAR FILE: $(basename $bar)" | tee /dev/tty
        echo ""
        #echo "$input_path/$bar"
        #echo "$work_dir"
        mqsicreateworkdir $work_dir
        ibmint deploy --input-bar-file "$input_path/$bar" --output-work-directory "$work_dir"
        cd $work_dir
        mkdir "$output_dir/$(basename -s .bar $bar)"

        # call CreateTemporaryWorkspaces.java
        echo -e "\nCreating temporary workspaces for:"
        java -cp "${code_dir}/AceDeploymentPlanner.jar"  com.ibm.ace.CreateTemporaryWorkspaces
        #java -jar "$CreateTemporaryWorkspaces_jar" 

        # run ibmint optimize in for loop
        echo "Running optimize on each app:"
        for f in temp*; 
        do
            echo "***************"
            echo "Running optimize on $f "                      
            ibmint optimize server --work-directory $work_dir/$f    
            cp "$work_dir/$f/server.components.yaml" "$output_dir/$(basename -s .bar $bar)/${f:5}.yaml"            
        done

        echo "***************" 

        # call AnalyzeOptimizations.java
        echo -e "\nAnalyzing server.components.yaml for:"
        java -cp "${code_dir}/AceDeploymentPlanner.jar" com.ibm.ace.AnalyzeOptimizations $type $(basename -s .bar $bar)
        cp "$work_dir/output.txt" "$output_dir/$(basename -s .bar $bar)_OptimizerReport.txt"
        echo "Output written to $output_dir/$(basename -s .bar $bar)_OptimizerReport.txt"
        cd $workspace
        rm -rf $work_dir
    done
    # call DeleteTemporaryWorkspaces
    type="Bar"
else
    echo "Invalid input: It should be zip file or folder of bar files"
    exit 1
fi

echo -e "\nGENERATING FINAL REPORT:\n"
cd "$output_dir"
java -cp "${code_dir}/AceDeploymentPlanner.jar" com.ibm.ace.GenerateFinalReport $type $(basename -s .zip $input_path) | tee /dev/tty
ace_artifacts_analyzer="$(dirname "$(dirname "$(dirname "$(dirname "$(dirname "$code_dir")")")")")"
echo "$output_dir" > "$ace_artifacts_analyzer/path.txt"

trap 'cd "${start_pwd}"' 0 1 2 3
exec 2>&4 1>&3
echo "Analysis completed!!"

cd "$ace_artifacts_analyzer/Frontend_parser"
npm run dev
